import java.util.List;
import java.util.stream.Collectors;

public class PartitionByEx {
	 //We can Also Use partitioningBy
    
//    Using partitioningBy() for Filtering Collections
//    The partitioningBy() method offers a convenient way to split a collection into
//    two distinct groups based on a condition. It returns a Map<Boolean, List<T>>,
//    where each key-value pair represents the results of applying the predicate to each element.
//    The keys are true and false, and the values are lists containing elements that satisfy or 
//    do not satisfy the predicate. This makes the method useful for categorizing data without
//    needing multiple loops or complex if-else structures.
//
//    Here is the basic syntax for using partitioningBy():
//
//    Map<Boolean, List<T>> partitionedData = 
//        stream.collect(Collectors.partitioningBy(predicate));
//    stream is the original stream of elements.
//    predicate is a condition that each element is tested against to determine which group 
//    it belongs to.
    
    
    
    List<List<Integer>> listOfLists2 = list.stream()
    		.collect(Collectors.partitioningBy(x -> x%2 == 0, Collectors.toList()))
    		.entrySet().stream().map(entry -> entry.getValue())
    		.collect(Collectors.toList());
    
    // Print result as list of lists
    System.out.println(listOfLists2);
}
