import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class DivideGivenList {
	// Divide given integer list into lists of even and odd numbers
	public static void main(String[] args) {
		 int[] intArray = {1, 2, 3, 4, 5, 6, 7, 8};
		 
//		 boxed method:
//			 The boxed method is used to convert a stream of primitive values (like IntStream, DoubleStream, LongStream)
//			 into a stream of their corresponding wrapper classes (e.g., Integer, Double, Long).
//			 Itâ€™s often used when you have a stream of primitive values, and you want to work with 
//			 them as objects in situations where object-oriented features are needed.
//		 boxed() is specifically for converting a primitive stream to a stream of boxed objects.

	        // Using boxed to convert IntStream to Stream<Integer>
		 
		 
		 	
	        List<Integer> list = Arrays.stream(intArray)
	                                           .boxed()
	                                           .collect(Collectors.toList());

	        // Print the list of boxed integers
	        System.out.println(list);
	        
	        Map<Boolean, List<Integer>> map = list.stream()
	        		.collect(Collectors.groupingBy(x -> x%2 == 0, Collectors.toList()));
	        

	        // Print the as map
	        System.out.println(map);
	        
	        List<List<Integer>> map = list.stream()
	        		.collect(Collectors.groupingBy(x -> x%2 == 0, Collectors.toList()))
	        		.entrySet().stream().map(entry -> entry.getValue()).collect(Collectors.toList());
	        

	        // Print the as map
	        System.out.println(map);
	}
}
